name: Deploy Social App

on:
  watch:
    types: [started]  # Star時のみ

  # 手動実行も可能
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Action
        id: check_action
        run: |
          if [ "${{ github.event_name }}" = "watch" ]; then
            echo "action=deploy" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          else
            echo "action=deploy" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::709588767777:role/sns-app-github-actions-role
          role-session-name: social-app-deploy-session
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"

      - name: Setup Docker Buildx
        if: steps.check_action.outputs.action == 'deploy'
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        if: steps.check_action.outputs.action == 'deploy'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR Repository if not exists
        if: steps.check_action.outputs.action == 'deploy'
        run: |
          aws ecr describe-repositories --repository-names social-app 2>/dev/null || \
          aws ecr create-repository --repository-name social-app --image-scanning-configuration scanOnPush=true

      - name: Build and push Docker image
        if: steps.check_action.outputs.action == 'deploy'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: social-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Laravel PHPアプリイメージをビルド・プッシュ
          docker buildx build --platform linux/amd64 \
            --target production \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f docker/php/Dockerfile . --push

      - name: Terraform Init and Plan
        working-directory: ./terraform
        run: |
          # まずローカルバックエンドで初期化
          terraform init
          
          # バックエンドリソースの存在確認
          BUCKET_EXISTS=$(aws s3api head-bucket --bucket "social-app-terraform-state-bucket-apne1" 2>/dev/null && echo "true" || echo "false")
          DYNAMODB_EXISTS=$(aws dynamodb describe-table --table-name "social-app-terraform-locks" 2>/dev/null && echo "true" || echo "false")
          
          echo "S3 bucket exists: $BUCKET_EXISTS"
          echo "DynamoDB table exists: $DYNAMODB_EXISTS"
          
          if [ "$BUCKET_EXISTS" = "false" ] || [ "$DYNAMODB_EXISTS" = "false" ]; then
            echo "Creating backend resources..."
            terraform apply -target=aws_s3_bucket.terraform_state \
              -target=aws_s3_bucket_versioning.terraform_state \
              -target=aws_s3_bucket_server_side_encryption_configuration.terraform_state \
              -target=aws_s3_bucket_public_access_block.terraform_state \
              -target=aws_dynamodb_table.terraform_locks \
              -auto-approve \
              -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
              -var="ecr_repository_url=${{ steps.login-ecr.outputs.registry }}/social-app:${{ github.sha }}" \
              -var="db_password=${{ secrets.DB_PASSWORD }}" \
              -var="app_key=${{ secrets.APP_KEY }}" \
              -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
              -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
              -var="frontend_url=${{ secrets.FRONTEND_URL }}"
          fi
          
          # リモートバックエンドに移行
          echo "Migrating to remote backend..."
          sed -i 's/# backend "s3"/backend "s3"/' main.tf
          sed -i 's/#   bucket/  bucket/' main.tf
          sed -i 's/#   key/  key/' main.tf
          sed -i 's/#   region/  region/' main.tf
          sed -i 's/#   dynamodb_table/  dynamodb_table/' main.tf
          sed -i 's/#   encrypt/  encrypt/' main.tf
          sed -i 's/# }/}/' main.tf
          
          # リモートバックエンドで再初期化
          sleep 10
          echo "yes" | terraform init -migrate-state || echo "Migration completed"

      - name: Terraform Deploy
        if: steps.check_action.outputs.action == 'deploy'
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=${{ steps.login-ecr.outputs.registry }}/social-app:${{ github.sha }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}"

      - name: Terraform Destroy
        if: steps.check_action.outputs.action == 'destroy'
        working-directory: ./terraform
        run: |
          terraform init
          terraform destroy -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=dummy" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}"

      - name: Get Infrastructure Info
        if: steps.check_action.outputs.action == 'deploy'
        working-directory: ./terraform
        id: terraform
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "pending")
          API_DOMAIN=$(terraform output -raw api_domain 2>/dev/null || echo "pending")
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "api_domain=$API_DOMAIN" >> $GITHUB_OUTPUT

      - name: Create Issue (Deploy Started)
        if: steps.check_action.outputs.action == 'deploy'
        uses: actions/github-script@v7
        with:
          script: |
            const starCount = context.payload.repository?.stargazers_count || 0;
            const title = `🚀 Social App デプロイ完了! (Star数: ${starCount})`;
            const body = `⭐ **Starありがとうございます！Social Appをデプロイしました**
            
            **📊 デプロイ情報:**
            - Star数: ${starCount}
            - API エンドポイント: https://${{ steps.terraform.outputs.api_domain }}
            - ALB DNS: ${{ steps.terraform.outputs.alb_dns }}
            - Docker Image: ${{ steps.login-ecr.outputs.registry }}/social-app:${{ github.sha }}
            
            **⏰ ステータス:**
            - ✅ インフラ構築: 完了
            - ✅ ECS サービス: 起動中（5-10分程度でアクセス可能）
            - ✅ SSL証明書: 設定完了
            
            **🛑 停止方法:**
            Actions → Deploy Social App → Run workflow → destroy
            
            🤖 Generated with [Claude Code](https://claude.ai/code)`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'auto-generated']
            });

      - name: Create Issue (Destroy Completed)
        if: steps.check_action.outputs.action == 'destroy'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🧹 Social App リソース削除完了`;
            const body = `**🛑 全リソースを削除しました**
            
            **📊 削除されたリソース:**
            - ECS Cluster/Service/Task Definition
            - Application Load Balancer
            - VPC/Subnets/NAT Gateway/EIP
            - RDS MySQL Instance
            - ElastiCache Redis Cluster
            - Route53 Records
            - ACM Certificate
            - SSM Parameters
            - CloudWatch Log Groups
            
            **💰 コスト削減:**
            - 高額リソース（NAT Gateway、RDS、ALB等）: 削除完了 ✅
            - 全てのインフラリソース: 削除完了 ✅
            
            🤖 Generated with [Claude Code](https://claude.ai/code)`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['cleanup', 'auto-generated']
            });

      - name: Emergency Cleanup on Failure
        if: failure() && steps.check_action.outputs.action == 'deploy'
        continue-on-error: true
        working-directory: ./terraform
        run: |
          echo "🚨 DEPLOYMENT FAILED - STARTING CLEANUP 🚨"
          terraform destroy -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=dummy" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}" || echo "Cleanup completed"