name: Star-Based Deploy Control

on:
  watch:
    types: [started]  # Star時のみ（Unstarは検出不可）

# スケジュール実行でStar状態をチェック（Unstar検出のため）
  # schedule:
  #   - cron: '*/10 * * * *'  # 10分毎にチェック（コスト削減のため無効化）

  # 手動実行も可能
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'check'
        type: choice
        options:
        - check
        - force_start
        - force_stop

jobs:
  deploy-control:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Star Status
        id: check_star
        uses: actions/github-script@v7
        with:
          script: |
            // リポジトリのStar数を取得
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const starCount = repo.stargazers_count;
            console.log(`Current star count: ${starCount}`);
            
            // 前回のStar数と比較（GitHub Actionsの環境変数から取得）
            const previousStarCount = process.env.PREVIOUS_STAR_COUNT || '0';
            console.log(`Previous star count: ${previousStarCount}`);
            
            let action = 'none';
            if (starCount > parseInt(previousStarCount)) {
              action = 'start';
            } else if (starCount < parseInt(previousStarCount)) {
              action = 'stop';
            }
            
            // 手動実行の場合
            if (context.eventName === 'workflow_dispatch') {
              action = context.payload.inputs.action === 'force_start' ? 'start' : 
                      context.payload.inputs.action === 'force_stop' ? 'stop' : 'check';
            }
            
            core.setOutput('action', action);
            core.setOutput('star_count', starCount);
            core.setOutput('previous_count', previousStarCount);

      - name: Configure AWS credentials
        if: steps.check_star.outputs.action == 'start' || steps.check_star.outputs.action == 'stop'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::709588767777:role/sns-app-github-actions-role
          role-session-name: sns-app-deploy-session
          aws-region: ap-northeast-1

      - name: Setup Terraform
        if: steps.check_star.outputs.action == 'start'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Setup Docker Buildx
        if: steps.check_star.outputs.action == 'start'
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        if: steps.check_star.outputs.action == 'start'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker images
        if: steps.check_star.outputs.action == 'start'
        run: |
          # Laravel PHPアプリイメージをビルド・プッシュ
          docker buildx build --platform linux/amd64 --target production \
            -t ${{ secrets.ECR_REPOSITORY_URL }}:latest \
            -f docker/php/Dockerfile . --push
          
          # nginxイメージをビルド・プッシュ
          docker buildx build --platform linux/amd64 --target production \
            -t ${{ secrets.ECR_REPOSITORY_URL }}:nginx-latest \
            -f docker/nginx/Dockerfile . --push

      - name: Cleanup existing resources
        if: steps.check_star.outputs.action == 'start'
        run: |
          echo "🧹 Comprehensive cleanup of existing resources..."
          
          # VPC重複防止: 既存のVPCを完全削除
          echo "Deleting existing VPCs..."
          VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=sns-app-vpc" --query 'Vpcs[].VpcId' --output text)
          for vpc_id in $VPC_IDS; do
            echo "Found existing VPC: $vpc_id - Starting deletion..."
            
            # ECS Service/Cluster削除 (VPC削除前に必要)
            aws ecs update-service --cluster sns-app-cluster --service sns-app-service --desired-count 0 || true
            sleep 30
            aws ecs delete-service --cluster sns-app-cluster --service sns-app-service --force || true
            aws ecs delete-cluster --cluster sns-app-cluster || true
            
            # ALB削除
            ALB_ARNS=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?VpcId=='$vpc_id'].LoadBalancerArn" --output text)
            for alb_arn in $ALB_ARNS; do
              echo "Deleting ALB: $alb_arn"
              aws elbv2 delete-load-balancer --load-balancer-arn $alb_arn || true
            done
            
            # Target Groups削除
            TG_ARNS=$(aws elbv2 describe-target-groups --query "TargetGroups[?VpcId=='$vpc_id'].TargetGroupArn" --output text)
            for tg_arn in $TG_ARNS; do
              echo "Deleting Target Group: $tg_arn"
              aws elbv2 delete-target-group --target-group-arn $tg_arn || true
            done
            
            # RDS削除 (VPCサブネット使用中のため)
            RDS_IDS=$(aws rds describe-db-instances --query "DBInstances[?DBSubnetGroup.VpcId=='$vpc_id'].DBInstanceIdentifier" --output text)
            for rds_id in $RDS_IDS; do
              echo "Deleting RDS: $rds_id"
              aws rds delete-db-instance --db-instance-identifier $rds_id --skip-final-snapshot --delete-automated-backups || true
            done
            
            # ElastiCache削除
            CACHE_IDS=$(aws elasticache describe-replication-groups --query 'ReplicationGroups[?contains(ReplicationGroupId,`sns-app`)].ReplicationGroupId' --output text)
            for cache_id in $CACHE_IDS; do
              echo "Deleting ElastiCache: $cache_id"
              aws elasticache delete-replication-group --replication-group-id $cache_id || true
            done
            
            # NAT Gateway削除 (EIP削除前に必要)
            NAT_IDS=$(aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$vpc_id" --query 'NatGateways[?State==`available`].NatGatewayId' --output text)
            for nat_id in $NAT_IDS; do
              echo "Deleting NAT Gateway: $nat_id"
              aws ec2 delete-nat-gateway --nat-gateway-id $nat_id || true
            done
            
            # ENIの強制削除
            ENI_IDS=$(aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$vpc_id" --query 'NetworkInterfaces[].NetworkInterfaceId' --output text)
            for eni_id in $ENI_IDS; do
              echo "Force detaching ENI: $eni_id"
              aws ec2 detach-network-interface --network-interface-id $eni_id --force || true
              sleep 5
              aws ec2 delete-network-interface --network-interface-id $eni_id || true
            done
            
            echo "Waiting for resource cleanup to complete..."
            sleep 120
            
            # VPC内のサブネット削除
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc_id" --query 'Subnets[].SubnetId' --output text)
            for subnet_id in $SUBNET_IDS; do
              echo "Deleting subnet: $subnet_id"
              aws ec2 delete-subnet --subnet-id $subnet_id || true
            done
            
            # インターネットゲートウェイ削除
            IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc_id" --query 'InternetGateways[].InternetGatewayId' --output text)
            for igw_id in $IGW_IDS; do
              echo "Detaching and deleting IGW: $igw_id"
              aws ec2 detach-internet-gateway --internet-gateway-id $igw_id --vpc-id $vpc_id || true
              aws ec2 delete-internet-gateway --internet-gateway-id $igw_id || true
            done
            
            # ルートテーブル削除 (デフォルト以外)
            RT_IDS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$vpc_id" --query 'RouteTables[?Associations[0].Main != `true`].RouteTableId' --output text)
            for rt_id in $RT_IDS; do
              echo "Deleting route table: $rt_id"
              aws ec2 delete-route-table --route-table-id $rt_id || true
            done
            
            # セキュリティグループ削除 (デフォルト以外)
            SG_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$vpc_id" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text)
            for sg_id in $SG_IDS; do
              echo "Deleting security group: $sg_id"
              aws ec2 delete-security-group --group-id $sg_id || true
            done
            
            # VPC削除
            echo "Finally deleting VPC: $vpc_id"
            aws ec2 delete-vpc --vpc-id $vpc_id || true
          done
          
          # EIP削除 (NAT Gateway削除後)
          sleep 60
          EIP_IDS=$(aws ec2 describe-addresses --query 'Addresses[?contains(to_string(Tags),`sns-app`)].AllocationId' --output text)
          for eip_id in $EIP_IDS; do
            echo "Releasing EIP: $eip_id"
            aws ec2 release-address --allocation-id $eip_id || true
          done
          
          # CloudWatch Logs削除
          aws logs delete-log-group --log-group-name /ecs/sns-app || true
          aws logs delete-log-group --log-group-name /ecs/sns-app-nginx || true
          
          # ElastiCache/RDS Subnet Group削除
          aws elasticache delete-cache-subnet-group --cache-subnet-group-name sns-app-cache-subnet || true
          aws rds delete-db-subnet-group --db-subnet-group-name sns-app-db-subnet-group || true
          
          # SSMパラメータ削除
          aws ssm delete-parameter --name /sns-app/app_key || true
          aws ssm delete-parameter --name /sns-app/db_password || true
          aws ssm delete-parameter --name /sns-app/firebase_credentials || true
          
          echo "✅ VPC cleanup completed, waiting for AWS propagation..."
          sleep 30

      - name: Terraform Init
        if: steps.check_star.outputs.action == 'start'
        working-directory: ./terraform
        run: terraform init

      - name: Check DNS Configuration
        if: steps.check_star.outputs.action == 'start'
        run: |
          echo "🔍 Checking DNS configuration for SSL certificate..."
          
          # Route53ネームサーバーを取得
          NAMESERVERS=$(aws route53 get-hosted-zone --id $(aws route53 list-hosted-zones --query "HostedZones[?Name=='${{ secrets.DOMAIN_NAME }}.'].Id" --output text | cut -d'/' -f3) --query 'DelegationSet.NameServers' --output text)
          echo "Route53 NameServers: $NAMESERVERS"
          
          # DNS伝播確認
          for ns in $NAMESERVERS; do
            echo "Checking DNS propagation on $ns"
            dig @$ns ${{ secrets.DOMAIN_NAME }} SOA +short || true
          done

      - name: Deploy Infrastructure (Star Added)
        if: steps.check_star.outputs.action == 'start'
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}"

      - name: Emergency Resource Cleanup on Failure
        if: failure()
        continue-on-error: true
        run: |
          echo "🚨 DEPLOYMENT FAILED - EMERGENCY CLEANUP STARTING 🚨"
          
          # Terraform destroy (最優先)
          cd terraform
          terraform destroy -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}" || echo "Terraform destroy failed, proceeding with manual cleanup"
          
          cd ..
          
          echo "🧹 Manual cleanup of remaining resources..."
          
          # NAT Gateway削除 (最高優先 - $45/月)
          NAT_IDS=$(aws ec2 describe-nat-gateways --filter "Name=tag:Name,Values=*sns-app*" --query 'NatGateways[?State==`available`].NatGatewayId' --output text)
          for nat_id in $NAT_IDS; do
            echo "Deleting NAT Gateway: $nat_id"
            aws ec2 delete-nat-gateway --nat-gateway-id $nat_id || true
          done
          
          # RDS削除 (高優先 - $15-30/月)
          RDS_IDS=$(aws rds describe-db-instances --query 'DBInstances[?contains(DBInstanceIdentifier,`sns-app`)].DBInstanceIdentifier' --output text)
          for rds_id in $RDS_IDS; do
            echo "Deleting RDS instance: $rds_id"
            aws rds delete-db-instance --db-instance-identifier $rds_id --skip-final-snapshot --delete-automated-backups || true
          done
          
          # ElastiCache削除 (高優先 - $10-20/月)
          CACHE_IDS=$(aws elasticache describe-replication-groups --query 'ReplicationGroups[?contains(ReplicationGroupId,`sns-app`)].ReplicationGroupId' --output text)
          for cache_id in $CACHE_IDS; do
            echo "Deleting ElastiCache: $cache_id"
            aws elasticache delete-replication-group --replication-group-id $cache_id || true
          done
          
          # ALB削除 (中優先 - $20/月)
          ALB_ARNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName,`sns-app`)].LoadBalancerArn' --output text)
          for alb_arn in $ALB_ARNS; do
            echo "Deleting ALB: $alb_arn"
            aws elbv2 delete-load-balancer --load-balancer-arn $alb_arn || true
          done
          
          # ECS Service/Cluster削除
          aws ecs update-service --cluster sns-app-cluster --service sns-app-service --desired-count 0 || true
          sleep 30
          aws ecs delete-service --cluster sns-app-cluster --service sns-app-service || true
          aws ecs delete-cluster --cluster sns-app-cluster || true
          
          # EIP削除 (低優先だが課金あり - $3.6/月)
          sleep 120  # NAT Gateway削除待ち
          EIP_IDS=$(aws ec2 describe-addresses --query 'Addresses[?contains(to_string(Tags),`sns-app`)].AllocationId' --output text)
          for eip_id in $EIP_IDS; do
            echo "Releasing EIP: $eip_id"
            aws ec2 release-address --allocation-id $eip_id || true
          done
          
          # Target Groups削除
          TG_ARNS=$(aws elbv2 describe-target-groups --query 'TargetGroups[?contains(TargetGroupName,`sns-app`)].TargetGroupArn' --output text)
          for tg_arn in $TG_ARNS; do
            echo "Deleting Target Group: $tg_arn"
            aws elbv2 delete-target-group --target-group-arn $tg_arn || true
          done
          
          # VPC削除 (上限エラー対策)
          VPC_IDS=$(aws ec2 describe-vpcs --query 'Vpcs[?Tags[?Key==`Name` && contains(Value,`sns-app`)]].VpcId' --output text)
          for vpc_id in $VPC_IDS; do
            echo "Deleting VPC dependencies for: $vpc_id"
            
            # VPC内のサブネット削除
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc_id" --query 'Subnets[].SubnetId' --output text)
            for subnet_id in $SUBNET_IDS; do
              aws ec2 delete-subnet --subnet-id $subnet_id || true
            done
            
            # インターネットゲートウェイ削除
            IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc_id" --query 'InternetGateways[].InternetGatewayId' --output text)
            for igw_id in $IGW_IDS; do
              aws ec2 detach-internet-gateway --internet-gateway-id $igw_id --vpc-id $vpc_id || true
              aws ec2 delete-internet-gateway --internet-gateway-id $igw_id || true
            done
            
            # ルートテーブル削除 (デフォルト以外)
            RT_IDS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$vpc_id" --query 'RouteTables[?Associations==`null`].RouteTableId' --output text)
            for rt_id in $RT_IDS; do
              aws ec2 delete-route-table --route-table-id $rt_id || true
            done
            
            # セキュリティグループ削除 (デフォルト以外)
            SG_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$vpc_id" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text)
            for sg_id in $SG_IDS; do
              aws ec2 delete-security-group --group-id $sg_id || true
            done
            
            # VPC削除
            echo "Deleting VPC: $vpc_id"
            aws ec2 delete-vpc --vpc-id $vpc_id || true
          done
          
          echo "✅ Emergency cleanup completed - major cost resources and VPCs deleted"

      - name: Scale ECS Service UP
        if: steps.check_star.outputs.action == 'start'
        run: |
          aws ecs update-service \
            --cluster sns-app-cluster \
            --service sns-app-service \
            --desired-count 1

      - name: Scale ECS Service DOWN (Star Removed)
        if: steps.check_star.outputs.action == 'stop'
        run: |
          aws ecs update-service \
            --cluster sns-app-cluster \
            --service sns-app-service \
            --desired-count 0

      - name: Get Infrastructure Info
        if: steps.check_star.outputs.action == 'start'
        working-directory: ./terraform
        id: terraform
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "pending")
          API_DOMAIN=$(terraform output -raw api_domain 2>/dev/null || echo "pending") 
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "api_domain=$API_DOMAIN" >> $GITHUB_OUTPUT

      - name: Create Issue (Cleanup Required)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `⚠️ デプロイ失敗 - リソースクリーンアップ確認要`;
            const body = `❌ **デプロイが失敗しました**
            
            **自動クリーンアップ実行済み**
            ただし、AWS Console で以下を手動確認してください：
            
            **確認すべきリソース:**
            - NAT Gateway (課金発生)
            - EIP (Elastic IP)
            - VPC
            - ECS Cluster
            - RDS Instance
            
            **手動削除が必要な場合:**
            AWS Console > CloudFormation または各サービス画面で削除
            
            ---
            *コスト発生を防ぐため、速やかに確認してください*`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment-failed', 'cleanup-required', 'urgent']
            });

      - name: Create Issue (Deploy Started)
        if: steps.check_star.outputs.action == 'start'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚀 アプリケーション起動中... (Star数: ${{ steps.check_star.outputs.star_count }})`;
            const body = `⭐ **Starありがとうございます！アプリケーションをデプロイ中です**
            
            **📊 デプロイ情報:**
            - Star数: ${{ steps.check_star.outputs.star_count }}
            - API エンドポイント: https://${{ steps.terraform.outputs.api_domain }}
            - ALB DNS: ${{ steps.terraform.outputs.alb_dns }}
            
            **⏰ ステータス:**
            - ✅ インフラ構築: 完了
            - 🔄 ECSサービス起動: 進行中（5-10分程度）
            - 🌐 SSL証明書: 設定中
            
            **🛑 停止方法:**
            リポジトリページで⭐Starを外してください
            
            ---
            *この Issue は10分後に自動的にクローズされます*`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'auto-generated']
            });

      - name: Create Issue (App Stopped)
        if: steps.check_star.outputs.action == 'stop'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `⏹️ アプリケーション停止 (Star数: ${{ steps.check_star.outputs.star_count }})`;
            const body = `**🛑 アプリケーションを停止しました**
            
            **📊 現在の状況:**
            - Star数: ${{ steps.check_star.outputs.star_count }}
            - ECSタスク数: 0 (停止状態)
            - インフラ: 維持中
            
            **💰 コスト削減:**
            - ECS Fargate課金: 停止 ✅
            - RDS/ElastiCache: 継続中（低コスト）
            
            **🚀 再起動方法:**
            リポジトリページで⭐Starを付けてください
            
            ---
            *この Issue は10分後に自動的にクローズされます*`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'auto-generated']
            });

      - name: Update Star Count Record
        uses: actions/github-script@v7
        with:
          script: |
            // Star数を記録（次回比較用）
            // 実際の実装では、GitHub Secretsまたは外部ストレージに保存
            console.log(`Recorded star count: ${{ steps.check_star.outputs.star_count }}`);
        env:
          PREVIOUS_STAR_COUNT: ${{ steps.check_star.outputs.star_count }}