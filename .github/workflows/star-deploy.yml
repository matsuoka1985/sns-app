name: Star-Based Deploy Control

on:
  watch:
    types: [started]  # Star時のみ

  # 手動実行も可能
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'check'
        type: choice
        options:
        - check
        - force_start
        - force_stop
        - cleanup_all

jobs:
  deploy-control:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Star Status
        id: check_star
        uses: actions/github-script@v7
        with:
          script: |
            const starCount = context.payload.repository?.stargazers_count || 0;
            console.log(`Current star count: ${starCount}`);
            
            let action = 'none';
            if (context.eventName === 'watch') {
              action = 'start';
            } else if (context.eventName === 'workflow_dispatch') {
              const inputAction = context.payload.inputs.action;
              if (inputAction === 'force_start') action = 'start';
              else if (inputAction === 'force_stop' || inputAction === 'cleanup_all') action = 'stop';
            }
            
            core.setOutput('action', action);
            core.setOutput('star_count', starCount);

      - name: Configure AWS credentials
        if: steps.check_star.outputs.action == 'start' || steps.check_star.outputs.action == 'stop'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::709588767777:role/sns-app-github-actions-role
          role-session-name: social-app-deploy-session
          aws-region: ap-northeast-1

      - name: Setup Terraform
        if: steps.check_star.outputs.action == 'start'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Setup Terraform Backend
        if: steps.check_star.outputs.action == 'start'
        run: |
          echo "🏗️ Setting up Terraform backend resources..."
          cd terraform
          terraform init
          # バックエンドリソースのみ作成（一度だけ実行される）
          terraform apply -target=aws_s3_bucket.terraform_state \
            -target=aws_s3_bucket_versioning.terraform_state \
            -target=aws_s3_bucket_server_side_encryption_configuration.terraform_state \
            -target=aws_s3_bucket_public_access_block.terraform_state \
            -target=aws_dynamodb_table.terraform_locks \
            -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}" || echo "Backend resources already exist"

      - name: Pre-deployment Cleanup (Terraform only)
        if: steps.check_star.outputs.action == 'start'
        run: |
          echo "🧹 Cleaning up existing resources before deployment..."
          cd terraform
          terraform destroy -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}" || echo "No existing resources to destroy"
          cd ..
          echo "✅ Pre-deployment cleanup completed"

      - name: Setup Docker Buildx
        if: steps.check_star.outputs.action == 'start'
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        if: steps.check_star.outputs.action == 'start'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker images
        if: steps.check_star.outputs.action == 'start'
        run: |
          # Laravel PHPアプリイメージをビルド・プッシュ
          docker buildx build --platform linux/amd64 --target production \
            -t ${{ secrets.ECR_REPOSITORY_URL }}:latest \
            -f docker/php/Dockerfile . --push
          
          # nginxイメージをビルド・プッシュ
          docker buildx build --platform linux/amd64 --target production \
            -t ${{ secrets.ECR_REPOSITORY_URL }}:nginx-latest \
            -f docker/nginx/Dockerfile . --push

      - name: Terraform Init
        if: steps.check_star.outputs.action == 'start'
        working-directory: ./terraform
        run: terraform init

      - name: Deploy Infrastructure (Star Added)
        if: steps.check_star.outputs.action == 'start'
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}"

      - name: Emergency Cleanup on Failure
        if: failure()
        continue-on-error: true
        run: |
          echo "🚨 DEPLOYMENT FAILED - STARTING CLEANUP 🚨"
          
          # Terraform destroy
          cd terraform
          terraform destroy -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}" || true
          
          echo "✅ Cleanup completed"

      - name: Complete Resource Cleanup (Manual or Star Removed)
        if: steps.check_star.outputs.action == 'stop'
        run: |
          echo "🧹 STARTING COMPLETE RESOURCE CLEANUP 🧹"
          
          # Terraform destroy
          cd terraform
          terraform init || true
          terraform destroy -auto-approve \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="app_key=${{ secrets.APP_KEY }}" \
            -var="firebase_credentials=${{ secrets.FIREBASE_CREDENTIALS }}" \
            -var="cors_allowed_origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            -var="frontend_url=${{ secrets.FRONTEND_URL }}" || true
          
          echo "✅ Complete cleanup finished"

      - name: Get Infrastructure Info
        if: steps.check_star.outputs.action == 'start'
        working-directory: ./terraform
        id: terraform
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "pending")
          API_DOMAIN=$(terraform output -raw api_domain 2>/dev/null || echo "pending") 
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "api_domain=$API_DOMAIN" >> $GITHUB_OUTPUT

      - name: Create Issue (Deploy Started)
        if: steps.check_star.outputs.action == 'start'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚀 Social App デプロイ開始! (Star数: ${{ steps.check_star.outputs.star_count }})`;
            const body = `⭐ **Starありがとうございます！Social Appをデプロイ中です**
            
            **📊 デプロイ情報:**
            - Star数: ${{ steps.check_star.outputs.star_count }}
            - API エンドポイント: https://${{ steps.terraform.outputs.api_domain }}
            - ALB DNS: ${{ steps.terraform.outputs.alb_dns }}
            
            **⏰ ステータス:**
            - ✅ インフラ構築: 完了
            - 🔄 ECSサービス起動: 進行中（5-10分程度）
            - 🌐 SSL証明書: 設定中
            
            **🛑 停止方法:**
            Actions → Star-Based Deploy Control → Run workflow → cleanup_all
            
            🤖 Generated with [Claude Code](https://claude.ai/code)`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'auto-generated']
            });

      - name: Create Issue (Cleanup Completed)
        if: steps.check_star.outputs.action == 'stop'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🧹 Social App リソース削除完了`;
            const body = `**🛑 全リソースを削除しました**
            
            **📊 削除されたリソース:**
            - ECS Cluster/Service/Task Definition
            - ALB/Target Group
            - VPC/Subnets/NAT Gateway/EIP
            - RDS Instance
            - ElastiCache Cluster
            - Route53 Records
            - ACM Certificate
            - SSM Parameters
            - CloudWatch Log Groups
            
            **💰 コスト削減:**
            - 高額リソース（NAT Gateway等）: 削除完了 ✅
            - 全てのインフラリソース: 削除完了 ✅
            
            🤖 Generated with [Claude Code](https://claude.ai/code)`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['cleanup', 'auto-generated']
            });